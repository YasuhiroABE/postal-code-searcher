#!/usr/bin/env /usr/local/bin/ruby
# -*- coding: utf-8 -*-
#
module YaDecPass
  require 'optparse'
  def option_parser
    ret = {
      :passfile => "",
      :text => "",
      :salt => "",
      :debug=>false,
    }
    OptionParser.new do |opts|
      opts.banner = <<-EOF
  Usage: #{File::basename($0)} -t encrypted_text -s salt [-m master_pass_file] [-g]
#{File::basename($0)} is a tool to decrypt an encrypted_text which is encrypted by the encpassword command.
It aims to provide the confirmation process for the encrypted_text, it means a test purpose only.
This command cannot be used directly from any other commands
  Example: $ #{File::basename($0)} -t 79bdd82ddf62f58e67a31e5cd398430a -s 9464e7bdc9840463
EOF
      opts.separator ''
      opts.on('-t', '--text encrypted_text', 'Set the encrypted text.') { |p|
        ret[:text] = p
      }
      opts.on('-s', '--salt salt', 'Set the salt which displayed at encryption.') { |p|
        ret[:salt] = p
      }
      opts.on('-m', '--master_pass pwfile', 'Set the master password file') { |f|
        ret[:passfile] = f
      }
      opts.on('-d', '--debug', 'Enable the debug mode') { |g|
        ret[:debug] = g
      }
      opts.on_tail('-h', '--help', 'Show this message') {
        $stderr.puts opts
        exit(1)
      }
      begin
        opts.parse!(ARGV)
      rescue
        $stderr.puts opts
        $stderr.puts
        $stderr.puts "[error] #{$!}"
        exit(1)
      end
      if ret[:text] == ""
        $stderr.puts opts
        exit(1)
      end

      if ret[:passfile] == ""
        require 'socket'
        ## candidates of the default master password file
        mp_file1 = File::join([File::expand_path(File::dirname($0)), 
                               "..", "conf", "master_pw.json" ])
        mp_file2 = File::join([File::expand_path(File::dirname($0)),
                               "..", "conf", "master_pw.#{Socket::gethostname}.json"])
        ret[:passfile] = mp_file2
        ret[:passfile] = mp_file1 if not FileTest::exist?(ret[:passfile])
      end
    end
    ret
  end
end

if $0 == __FILE__

  @basedir = File.dirname($0)
  $:.unshift File.join([@basedir, "..", "..", "lib"])

  require 'yalt'
  include YaDecPass
  @opts = option_parser
  $stderr.puts "[debug] @opts: #{@opts}" if @opts[:debug]
  
  if not FileTest::exist?(@opts[:passfile])
    $stderr.puts "[error] the master password file is not available."
    exit(1)
  end
  ## Read passphrase from STDIN
  begin
    pass = YALTools::Crypt::decrypt_text(@opts[:passfile], @opts[:salt], @opts[:text])
    puts pass
  rescue
    $stderr.puts $! if @opts[:debug]
  end
end
