#!/usr/bin/env /usr/local/bin/ruby
# -*- coding: utf-8 -*-
#

module YaEncPass
  require 'optparse'
  def option_parser
    ret = {
      :init => false,
      :passfile => "",
      :plain_text => "",
      :salt_text => "",
      :csvout_mode => false,
      :debug=>false,
    }
    OptionParser.new do |opts|
      opts.banner = <<-EOF
  Usage:
#{File::basename($0)} is a tool to encrypt the given plain text with the common key which is stored in the master password file.
The master password file must be prepared before the encryption of the plain text.
  Init Mode: Initialize the master password file;
    #{File::basename($0)} -i [-m master_pass_file] [-g]
  Normal Mode: Encrypt the plain text;
    #{File::basename($0)} -p [plain_text] [-m master_password_file] [-g]

If "-m" options is omitted in the normal mode, the default password file is set to "../conf/master_pw.json" or "../conf/master_pw.#{Socket::gethostname}.json" which one found first.
In the init mode, the default master password file is set to "../conf/master_pw.#{Socket::gethostname}.json" or "../conf/master_pw.json" which one not found first.
EOF
      opts.separator ''
      opts.on('-p', '--plain_text [text]', 'Set the text for encryption.') { |p|
        ret[:plain_text] = p
      }
      opts.on('-s', '--salt salt', 'Set the salt text') { |s|
        ret[:salt_text] = s
      }
      opts.on('-c', '--csv_out', 'Enable the CSV output mode.') { |c|
        ret[:csvout_mode] = c
      }
      opts.on('-m', '--master_pass pwfile', 'Set the master password file') { |f|
        ret[:passfile] = f
      }
      opts.on('-d', '--debug', 'Enable the debug mode') { |g|
        ret[:debug] = g
      }
      opts.on('-i', '--init', '[Init. Mode] Output the master password file. Store this file to proper place.') { |i|
        ret[:init] = i
      }
      opts.on_tail('-h', '--help', 'Show this message') {
        $stderr.puts opts
        exit(1)
      }
      begin
        opts.parse!(ARGV)
      rescue
        $stderr.puts opts
        $stderr.puts
        $stderr.puts "[error] #{$!}"
        exit(1)
      end
      if ret[:init] == false and ret[:plain_text] == ""
        $stderr.puts "[error] password must be the non-empty string."
        $stderr.puts opts
        exit(1)
      end
      
      ## consider about the default master password file
      if ret[:passfile] == ""
        require 'socket'
        ## candidates of the default master password file
        mp_file1 = File::join([File::expand_path(File::dirname($0)), 
                               "..", "conf", "master_pw.json" ])
        mp_file2 = File::join([File::expand_path(File::dirname($0)),
                               "..", "conf", "master_pw.#{Socket::gethostname}.json"])
        if ret[:init]
          ret[:passfile] = mp_file1
          ret[:passfile] = mp_file2 if not FileTest::exist?(ret[:passfile])
        else
          ret[:passfile] = mp_file2
          ret[:passfile] = mp_file1 if not FileTest::exist?(ret[:passfile])
        end
      end
    end
    ret
  end
end

if $0 == __FILE__

  @basedir = File.dirname($0)
  $:.unshift File.join([@basedir, "..", "..", "lib"])

  require 'yalt'
  include YaEncPass
  @opts = option_parser
  $stderr.puts "@opts: #{@opts}" if @opts[:debug]
  
  if @opts[:init]
    ###############
    ## Init Mode ##
    ###############
    ## check the master password file
    if FileTest::exist?(@opts[:passfile])
      $stderr.puts "[error] Cannot initialize the master password file."
      $stderr.puts "[error] Please delete or rename the master password file, #{@opts[:passfile]}, first."
      exit(1)
    end
    
    pass = YALTools::Crypt::gen_password
    YALTools::Crypt::save_crypt_password(pass, @opts[:passfile])
    $stderr.puts pass
  else
    ###########################
    ## Normal Operation Mode ##
    ###########################
    ##
    ## check the master password file
    if not FileTest::exist?(@opts[:passfile])
      $stderr.puts "[error] the master password file is not available."
      exit(1)
    end
    ## Read passphrase from STDIN
    if @opts[:plain_text] == nil 
      @opts[:plain_text] = STDIN.readline.strip
    end
    begin
      text,salt = YALTools::Crypt::encrypt_text(@opts[:passfile], @opts[:plain_text], @opts[:salt_text])
      
      ## output the results
      puts "password_salt: #{salt}"
      puts "password: #{text}"
    rescue
      $stderr.puts $! if @opts[:debug]
    end
  end
end
