# -*- coding: utf-8 -*-

module YALTools

  # == Description
  #
  # YALTools::CmdLine module is a collection of methods which are highly ad-hoc and
  # depending on this project.
  #
  # These are not intended not to reuse by another project.
  # If a reusable method is developed, it should be moved to another module package.
  #
  module CmdLine
    
    #--
    # Methods for IO processing ##
    #++

    # iterates line which is read from $stdin or file.
    #
    # The default value, '-', means that the $stdin is default source.
    def load_line(file = '-') # :yields: line
      if file == "-"
        $stdin.each do |line|
          yield line.strip
        end
      elsif FileTest.exist?(file)
        open(file).each do |line|
          yield line.strip
        end
      end
    end
    module_function :load_line

    # parses the line as json.
    # returns the Hash object which converted by JSON::parse(line).
    def line_to_json(line) # :yields: json_hash
      json = nil
      begin
        json = JSON::parse(line)
      rescue
        json = {}
      end
      return json
    end
    module_function :line_to_json
     
    # returnds the Array object which generated by CSV class.
    def load_line_as_csv(file, sep) # :yields: row
      require 'csv'
      input = nil
      input = $stdin if file == "-"
      input = open(file)  if FileTest.exist?(file)
      
      opts = {}
      opts[:col_sep] = sep
      opts[:headers] = true
      opts[:skip_blanks] = true
      CSV.new(input, opts).each do |row|
        yield row
      end
    end
    module_function :load_line_as_csv

    # writes the +data+ into file or $stdout.
    # It assumes that the +data+ is text data, that is the why it uses the puts() method instead of write().
    def save_data(data, file, mode="a+", perms=0755)
      if file == "-"
        $stdout.puts(data)
        $stdout.flush
      else
        open(file, mode, perms) do |f|
          f.puts(data)
          f.flush
        end
      end
    end
    module_function :save_data

    #---
    # end of IO 
    #+++


    #---
    # Methods for misc processings.
    #+++
    
    # returns the default label name, "default.user"
    #
    def get_default_yaml_label()
      return "default.user"
    end
    module_function :get_default_yaml_label
    
    # return the default yaml conf filepath.
    #
    def get_default_yaml_conf(basedir)
      ret = ""
      ret = ENV["YALTCONFIG"] if ENV["YALTCONFIG"] != nil
      ret = File::join([basedir,"..","conf","yalt.#{Socket::gethostname}.yaml"]) if ret.empty? or not FileTest::exist?(ret)
      ret = File::join([basedir,"..","conf","yalt.yaml"]) if ret.empty? or not FileTest::exist?(ret)
      
      return ret
    end
    module_function :get_default_yaml_conf
    
    # returns the default master_pw filepath.
    def get_default_master_pwfile(conf)
      require 'socket'
      basedir = File::dirname(conf)
      ret = File::join([basedir, "master_pw.#{Socket::gethostname}.json"])
      ret = File::join([basedir, "master_pw.json"]) if not FileTest::exist?(ret)
      return ret
    end
    module_function :get_default_master_pwfile
    
    # returns the instance of YALTools::Main.
    #
    # This method might execute "exit(1)" because of
    # * missing configuration file.
    # * missing label of configuration file.
    # * failed to connect to the couchdb server.
    #
    # This method is designed for interactive tools, not for a daemon process use.
    #
    def getCouch(conf,label,debug=false)
      ret = nil
      
      if not FileTest::exist?(conf)
        $stderr.puts "[error] conf file, #{conf}. No such file or directory."
        exit(1)
      end
      begin
        wrapper = YALTools::MainWrapper.new(conf, label)
        wrapper.debug = debug
        wrapper.set_master_pwfile(get_default_master_pwfile(conf))
        $stderr.puts "" if debug
        ret = wrapper.getCouch
      rescue YALTools::LabelNotFoundError
        $stderr.puts "[error] label name, #{label}, is not found."
        $stderr.puts "[error] reason: #{$!}" if debug
        exit(1)
      rescue YALTools::ServerConnectionError
        $stderr.puts "[error] wrong server setting corresponding to the label, #{label}."
        $stderr.puts "[error] reason: #{$!}" if debug
        exit(1)
      rescue
        $stderr.puts "[error] reason: #{$!}" if debug
      end
      return ret
    end
    module_function :getCouch

    # sends HEAD request and returns a Hash object of results.
    def get_header(couch,uri)
      ret = couch.head(uri)
      if ret.kind_of?(Net::HTTPSuccess)
        json = {}
        ret.each do |i|
          json[i] = ret[i]
        end
        return json
      end
    end
  end
end
